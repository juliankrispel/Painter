// Generated by CoffeeScript 1.6.3
(function() {
  var Base, Brush, ImageSource, MovingBrushPainter, Painter, SimpleRenderer, dstCanvas, extend, getRandom, getRandomInt, loadImages, mainLoop, percentTrue, startApp, _ref, _ref1, _ref2, _ref3, _ref4,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  getRandom = function(lo, hi) {
    return Math.random() * (hi - lo) + lo;
  };

  percentTrue = function(p) {
    return Math.random() < (p / 100.0);
  };

  getRandomInt = function(lo, hi) {
    return Math.round(getRandom(lo, hi));
  };

  extend = function(obj) {
    var prop, source, _i, _len, _ref;
    _ref = Array.prototype.slice.call(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      if (source) {
        for (prop in source) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  };

  Base = (function() {
    function Base(options) {
      extend(this.state, options);
    }

    return Base;

  })();

  Brush = (function(_super) {
    __extends(Brush, _super);

    function Brush() {
      this.setState = __bind(this.setState, this);
      _ref = Brush.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Brush.prototype.state = {
      x: 0,
      y: 0,
      size: 0,
      shape: 0
    };

    Brush.prototype.setState = function() {
      extend(this.state, arguments);
      return this;
    };

    return Brush;

  })(Base);

  ImageSource = (function(_super) {
    __extends(ImageSource, _super);

    function ImageSource() {
      this.getImageCount = __bind(this.getImageCount, this);
      this.setSize = __bind(this.setSize, this);
      _ref1 = ImageSource.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ImageSource.prototype.state = {
      width: 0,
      height: 0,
      images: []
    };

    ImageSource.prototype.setSize = function(width, height) {
      this.state.width = width;
      return this.state.height = height;
    };

    ImageSource.prototype.getImageCount = function() {
      return this.state.images.length;
    };

    ImageSource.prototype.getImage = function(index) {
      return this.state.images[index];
    };

    ImageSource.prototype.addImage = function(img) {
      return this.state.images.push(img);
    };

    return ImageSource;

  })(Base);

  Painter = (function(_super) {
    __extends(Painter, _super);

    function Painter() {
      _ref2 = Painter.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Painter.prototype.state = {
      imgSrc: null,
      brushes: null,
      brushCount: 10
    };

    Painter.prototype.init = function() {};

    Painter.prototype.paint = function(renderer, destination) {};

    Painter.prototype.update = function() {};

    Painter.prototype.setImageSource = function(imgSrc) {
      this.imgSrc = imgSrc;
    };

    return Painter;

  })(Base);

  MovingBrushPainter = (function(_super) {
    __extends(MovingBrushPainter, _super);

    function MovingBrushPainter() {
      this.paint = __bind(this.paint, this);
      this.init = __bind(this.init, this);
      _ref3 = MovingBrushPainter.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    MovingBrushPainter.prototype.setBrushes = function(num) {
      this.state.brushCount;
      return this.init;
    };

    MovingBrushPainter.prototype.init = function() {
      var i, _results;
      this.brushes = [];
      i = 0;
      _results = [];
      while (i <= this.state.brushCount) {
        this.brushes.push(new Brush({
          dx: .5,
          dy: .5,
          x: getRandom(0, this.imgSrc.state.width - 1),
          y: getRandom(0, this.imgSrc.state.height - 1),
          size: 3,
          shape: 'circle'
        }));
        _results.push(++i);
      }
      return _results;
    };

    MovingBrushPainter.prototype.paint = function(renderer, dest) {
      var i, imgCount, imgIndex, src, _results;
      imgIndex = 0;
      imgCount = this.imgSrc.getImageCount();
      i = 0;
      _results = [];
      while (i < this.state.brushCount) {
        src = this.imgSrc.getImage(imgIndex);
        renderer.renderBrush(this.brushes[i].state, src, dest);
        imgIndex++;
        if (imgIndex === imgCount) {
          imgIndex = 0;
        }
        _results.push(++i);
      }
      return _results;
    };

    MovingBrushPainter.prototype.update = function() {
      var brushState, i, imgState;
      i = 0;
      while (i < this.state.brushCount) {
        brushState = this.brushes[i].state;
        imgState = this.imgSrc.state;
        brushState.x = brushState.x + brushState.dx;
        if (brushState.x < 0) {
          brushState.x = 0;
        }
        if (brushState.x > imgState.width) {
          brushState.x = imgState.width;
        }
        brushState.y = brushState.y + brushState.dy;
        if (brushState.y < 0) {
          brushState.y = 0;
        }
        if (brushState.y > imgState.height) {
          brushState.y = imgState.height;
        }
        if (percentTrue(30)) {
          brushState.size = getRandomInt(2, 15);
        }
        if (percentTrue(.5)) {
          brushState.x = getRandom(1, imgState.width);
          brushState.y = getRandom(1, imgState.height);
        }
        if (percentTrue(80)) {
          brushState.dx = getRandom(-1, 1) * (brushState.size / 2);
          brushState.dy = getRandom(-1, 1) * (brushState.size / 2);
        }
        if (brushState.x === NaN || brushState.y === NaN || brushState.dx === NaN || brushState.dy === NaN || brushState.size === NaN) {
          alert(brushState);
        }
        ++i;
      }
      return this;
    };

    return MovingBrushPainter;

  })(Painter);

  loadImages = function(imageFiles, callback) {
    var i, images, img, _results;
    images = [];
    i = 0;
    _results = [];
    while (i < imageFiles.length) {
      img = new Image();
      img.onload = function() {
        images.push(this);
        if (images.length === imageFiles.length) {
          return callback(images);
        }
      };
      img.src = imageFiles[i];
      _results.push(i++);
    }
    return _results;
  };

  SimpleRenderer = (function(_super) {
    __extends(SimpleRenderer, _super);

    function SimpleRenderer() {
      _ref4 = SimpleRenderer.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    SimpleRenderer.prototype.blendBlock = function(src, dst) {
      var i, _results;
      i = 0;
      _results = [];
      while (i < src.length) {
        dst[i] = (src[i] + dst[i]) / 2;
        dst[i + 1] = (src[i + 1] + dst[i + 1]) / 2;
        dst[i + 2] = (src[i + 2] + dst[i + 2]) / 2;
        _results.push(i += 4);
      }
      return _results;
    };

    SimpleRenderer.prototype.getBrushData = function(brush, context) {
      return context.getImageData(Math.round(brush.x), Math.round(brush.y), Math.round(brush.size), Math.round(brush.size));
    };

    SimpleRenderer.prototype.blend = function(src, dst, alpha) {
      return Math.round(alpha * src + (1 - alpha) * dst);
    };

    SimpleRenderer.prototype.renderBrush = function(brush, source, destination) {
      var alpha, b, cnt, d, dstData, dx, dy, g, i, r, srcContext, srcData, x, y;
      srcContext = source.imca.getContext("2d");
      srcData = this.getBrushData(brush, srcContext);
      dstData = this.getBrushData(brush, destination);
      if (brush.shape === "square") {
        this.blendBlock(srcData.data, dstData.data);
      }
      if (brush.shape === "circle") {
        x = 0;
        y = 0;
        cnt = brush.size / 2;
        i = 0;
        y = 0;
        while (y < brush.size) {
          x = 0;
          while (x < brush.size) {
            dx = x - cnt;
            dy = y - cnt;
            d = Math.sqrt(dx * dx + dy * dy);
            alpha = (cnt - d) / cnt;
            if (alpha < 0) {
              alpha = 0;
            }
            r = this.blend(srcData.data[i], dstData.data[i], alpha);
            g = this.blend(srcData.data[i + 1], dstData.data[i + 1], alpha);
            b = this.blend(srcData.data[i + 2], dstData.data[i + 2], alpha);
            dstData.data[i] = r;
            dstData.data[i + 1] = g;
            dstData.data[i + 2] = b;
            i += 4;
            ++x;
          }
          ++y;
        }
      }
      destination.putImageData(dstData, brush.x, brush.y);
      return this;
    };

    return SimpleRenderer;

  })(Base);

  mainLoop = function(images) {
    var context, dstContext, i, imgSource, iterate, myPainter, myRenderer,
      _this = this;
    imgSource = new ImageSource;
    imgSource.setSize(images[0].width, images[0].height);
    i = 0;
    while (i < images.length) {
      images[i].imca = document.createElement("canvas");
      images[i].imca.width = images[i].width;
      images[i].imca.height = images[i].height;
      context = images[i].imca.getContext("2d");
      context.drawImage(images[i], 0, 0);
      imgSource.addImage(images[i]);
      ++i;
    }
    myPainter = new MovingBrushPainter;
    myPainter.setImageSource(imgSource);
    myPainter.init();
    myRenderer = new SimpleRenderer;
    dstContext = dstCanvas.getContext("2d");
    dstContext.fillRect(0, 0, dstCanvas.width, dstCanvas.height);
    iterate = function() {
      myPainter.paint(myRenderer, dstContext);
      myPainter.update();
      return window.requestAnimationFrame(iterate);
    };
    window.requestAnimationFrame(iterate);
    return null;
  };

  dstCanvas = null;

  startApp = function(renderTarget) {
    dstCanvas = renderTarget;
    return loadImages(["img/03.jpg", "img/04.jpg", "img/05.jpg"], mainLoop);
  };

  startApp(document.getElementById("canvas"));

}).call(this);
